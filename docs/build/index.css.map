{
  "version": 3,
  "file": "index.css",
  "sources": [
    "../../demo/App.svelte",
    "../../demo/DateTime.svelte",
    "../../demo/GanttOptions.svelte",
    "../../demo/Nav.svelte",
    "../../demo/Dependencies.svelte",
    "../../demo/Events.svelte",
    "../../demo/External.svelte",
    "../../demo/LargeDataset.svelte",
    "../../demo/Tree.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Nav from './components/Nav.svelte';  \n    import { Router, Route, navigate, Link } from \"svelte-routing\";\n    import LargeDataset from './routes/LargeDataset.svelte';\n    import Dependencies from './routes/Dependencies.svelte';\n    import External from './routes/External.svelte';\n    import Events from './routes/Events.svelte';\n    import Tree from './routes/Tree.svelte';\n    import { writable } from 'svelte/store';\n    import { setContext } from 'svelte';\n\n    let showOptions = false;\n    function onToggleOptions() {\n        showOptions = !showOptions;\n    }\n\n    let optionsStream = new writable({});\n    function onChangeOptions(event) {\n        const opts = event.detail;\n        $optionsStream = opts;\n        optionsStream.set(opts);\n        console.log('onChangeOptions', opts);\n    }\n\n    setContext('options', { optionsStream, toggle: new writable(false) });\n\n    function onLoadRoute(event) {\n        navigate(event.detail.url);\n    }\n</script>\n\n<style>\n    .container {\n        display: flex;\n        overflow: auto;\n        flex: 1;\n    }\n</style>\n\n<Nav on:updateOptions={onChangeOptions} on:toggleOptions={onToggleOptions} on:loadRoute={onLoadRoute}/>\n<div class=\"container\">\n    <Router basepath=\"/svelte-gantt\">\n        <Route path=\"/\" component=\"{LargeDataset}\" />\n        <Route path=\"/dependencies\" component=\"{Dependencies}\" />\n        <Route path=\"/tree\" component=\"{Tree}\" />\n        <Route path=\"/external\" component=\"{External}\" />\n        <Route path=\"/events\" component=\"{Events}\" />\n    </Router>\n\n    {#if showOptions}\n        <!-- <GanttOptions options={options} on:change={onChangeOptions}/> -->\n    {/if}\n</div>",
    "<script>\n    export let value;\n    $: {\n        parseDate(value);\n    }\n\n    let dateStr = '';\n    let timeStr = '';\n    $: {\n        emitDate(dateStr, timeStr);\n    }\n\n    function parseDate(dateObj) {\n        if(dateObj) {\n            const [date, time] = new Date(dateObj).toLocaleString(\"sv-SE\").split(' ');\n            dateStr = date;\n            timeStr = time;\n        }\n    }\n\n    function emitDate(date, time) {\n        if(date && time) {\n            value = new Date(`${date} ${time}`);\n        } else {\n            value = null;\n        }\n    }\n</script>\n\n<style>\n    .date-time {\n        display: flex;\n    }\n\n    input {\n        border: 0;\n        border-bottom: 1px solid #cc595e;\n        background: #cc595e36;\n    }\n</style>\n\n<div class=\"date-time\">\n    <input type=\"date\" bind:value={dateStr}>\n    <input type=\"time\" bind:value={timeStr}>\n</div>",
    "<script>\nimport { getContext } from \"svelte\";\n\n    import { createEventDispatcher } from \"svelte\";\n    import DateTime from './DateTime.svelte';\n\n\n    export let options;\n\n    $: {\n        dispatch('change', options);\n    }\n\n    const dispatch = createEventDispatcher();\n\n    const offsetOptions = [5, 10, 15, 30];\n\n    let { toggle, optionsStream } = getContext('options');\n    $: {\n        dispatch('change', $optionsStream);\n    };\n</script>\n\n<style>\n    .controls {\n        background: #ffc0c3;\n        padding: 16px;\n    }\n\n    .form-label {\n        display: block;\n    }\n\n    .form-group {\n        display: flex;\n        flex-direction: column;\n        margin-bottom: 0.5rem;\n    }\n\n    input, select {\n        border: 0;\n        border-bottom: 1px solid #cc595e;\n        background: #cc595e36;\n    }\n\n    h3 {\n        margin: 0;\n        margin-bottom: 1.5rem;\n    }\n</style>\n\n\n{#if $toggle}\n<div class=\"controls\">\n    <h3>Options</h3>\n\n    <div class=\"form-group\">\n        <label class=\"form-label\"> columnOffset </label>\n        <select bind:value={options.columnOffset}>\n            {#each offsetOptions as offset}\n                <option value={offset}>{offset}</option>\n            {/each}\n        </select>\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"form-label\"> magnetOffset </label>\n        <select bind:value={options.magnetOffset}>\n            {#each offsetOptions as offset}\n                <option value={offset}>{offset}</option>\n            {/each}\n        </select>\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"form-label\"> rowHeight ({options.rowHeight}) </label>\n        <input type=\"range\" bind:value={options.rowHeight} min=\"20\" max=\"100\">\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"form-label\"> rowPadding ({options.rowPadding}) </label>\n        <input type=\"range\" bind:value={options.rowPadding} min=\"0\" max=\"20\" step=\"2\">\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"form-label\"> fitWidth </label>\n        <input type=checkbox bind:checked={options.fitWidth}>\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"form-label\"> minWidth </label>\n        <input type=\"number\" bind:value={options.minWidth} min=\"800\">\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"form-label\"> from </label>\n        <DateTime bind:value={options.from}/>\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"form-label\"> to </label>\n        <DateTime bind:value={options.to}/>\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"form-label\"> headers[0].format </label>\n        <input type=\"text\" bind:value={options.headers[0].format}>\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"form-label\"> headers[1].format </label>\n        <input type=\"text\" bind:value={options.headers[1].format}>\n    </div>\n</div>\n{/if}",
    "<script>\n    import { createEventDispatcher } from 'svelte';\n    import { time } from '../utils';\n    import { getContext } from 'svelte';\n\n    export let currentStart = time('06:00');\n    export let currentEnd = time('18:00');\n\n    const dispatch = createEventDispatcher();\n\n    function onUpdateOptions(options) {\n        dispatch('updateOptions', options);\n    }\n\n    function onSetDayView() {\n        console.log('day view set');\n        onUpdateOptions({\n            fitWidth: true,\n            columnUnit: 'minute',\n            columnOffset: 15,\n            from: currentStart,\n            to: currentEnd,\n            minWidth: 1000,\n            headers: [{ unit: 'day', format: 'DD.MM.YYYY' }, { unit: 'hour', format: 'HH' }]\n        });\n    };\n\n    function onSetWeekView() {\n        console.log('week view set');\n        onUpdateOptions({\n            fitWidth: false,\n            columnUnit: 'hour',\n            columnOffset: 1,\n            from: currentStart.clone().startOf('week'),\n            to: currentStart.clone().endOf('week'),\n            minWidth: 5000,\n            headers: [{ unit: 'month', format: 'MMMM YYYY', sticky: true }, { unit: 'day', format: 'ddd DD', sticky: true }]\n        });\n    };\n\n    function onSetNextDay() {\n        currentStart.add(1, 'day');\n        currentEnd.add(1, 'day');\n        console.log('set next day');\n        onUpdateOptions({\n            from: currentStart,\n            to: currentEnd\n        });\n    };\n\n    function onSetPreviousDay() {\n        currentStart.subtract(1, 'day');\n        currentEnd.subtract(1, 'day');\n        console.log('set previous day');\n        onUpdateOptions({\n            from: currentStart,\n            to: currentEnd\n        });\n    };\n\n    let { toggle } = getContext('options');\n    function onToggleOptions() {\n        toggle.update(v => !v);\n        dispatch('toggleOptions');\n    }\n\n    function onLoadRoute(route) {\n        dispatch('loadRoute', { url: route});\n    }\n\n    import { Router, Link, Route } from \"svelte-routing\";\n</script>\n\n<style>\n    button, input[type=button] {\n        border: transparent;\n        font-size: 14px;\n        font-weight: 300;\n        padding: 6px 12px;\n        background: #cc595e;\n        color: #ffffff;\n        cursor: pointer;\n        transition: background 0.2s;\n        outline: none;\n    }\n    \n    input[type=button]:hover {\n        background-color: #b14d51;\n    }\n    \n    input[type=button]:active {\n        background-color: #9d4548;\n    }\n    \n    .header {\n        display: flex;\n        padding: 16px;\n        background: #ee6e73;\n    }\n    \n    @media only screen and (max-width: 900px) {\n        .header {\n            flex-direction: column;\n        }\n    \n        .header-title {\n            justify-content: center;\n            margin-bottom: 6px;\n        }\n    \n        .header-controls {\n            justify-content: center;\n        }\n    }\n    \n    .header-title {\n        display: flex;\n        flex: 1;\n        align-items: center;\n        font-size: 36px;\n        padding: 0 16px;\n    }\n    \n    .header-title a {\n        color: #ffffff;\n        text-decoration: none;\n    }\n    \n    .header-controls {\n        display: flex;\n        align-items: center;\n    }\n    \n    .header input {\n        margin-right: 4px;\n    }\n</style>\n\n<header class=\"header\">\n    <div class=\"header-title\">\n        <a href=\"https://github.com/ANovokmet/svelte-gantt\">Svelte-gantt</a>\n    </div>\n    <div class=\"header-controls\">\n        <input type=\"button\" value=\"Tree\" on:click={() => onLoadRoute('/svelte-gantt/tree')}>\n        <input type=\"button\" value=\"Dependencies\" on:click={() => onLoadRoute('/svelte-gantt/dependencies')}/>\n        <input type=\"button\" value=\"Large\" on:click={() => onLoadRoute('/svelte-gantt/')}/>\n        <input type=\"button\" value=\"External\" on:click={() => onLoadRoute('/svelte-gantt/external')}/>\n        <input type=\"button\" value=\"Events\" on:click={() => onLoadRoute('/svelte-gantt/events')}/>\n\n        <input type=\"button\" value=\"<\" on:click={onSetPreviousDay}/>\n        <input type=\"button\" value=\"Day view\" on:click={onSetDayView}/>\n        <input type=\"button\" value=\">\" on:click={onSetNextDay}/>\n\n        <input type=\"button\" value=\"Week view\" on:click={onSetWeekView}/>\n        <!-- <input id=\"new-task\" type=\"button\" value=\"Drag to gantt\"/> -->\n        <button on:click={onToggleOptions}>|||</button>\n        <!-- <input type=\"button\" value=\"{showCode ? 'Hide data' : 'Show data'}\" on:click={() => showCode = !showCode}/> -->\n    </div>\n</header>",
    "<script>\n    import { SvelteGantt, SvelteGanttDependencies, SvelteGanttExternal, SvelteGanttTable, MomentSvelteGanttDateAdapter } from 'svelte-gantt';\n    import { onMount } from 'svelte';\n    import { time } from '../utils';\n    import moment from 'moment';\n    import GanttOptions from '../components/GanttOptions.svelte';\n\n    const currentStart = time('06:00');\n    const currentEnd = time('18:00');\n\n    const colors = ['blue', 'green', 'orange']\n\n    const timeRanges = [\n        {\n            id: 0,\n            from: time('10:00'),\n            to: time('12:00'),\n            classes: null,\n            label: 'Lunch'\n        },\n        {\n            id: 1,\n            from: time('15:00'),\n            to: time('17:00'),\n            classes: null,\n            label: 'Dinner'\n        }\n    ];\n\n    export const data = {\n        rows: [{\n            \"id\": 1,\n            \"label\": \"Preparation and Planning\"\n        }, {\n            \"id\": 2,\n            \"label\": \"Development\"\n        }, {\n            \"id\": 3,\n            \"label\": \"Implementation\"\n        }, {\n            \"id\": 4,\n            \"label\": \"Training\"\n        }, {\n            \"id\": 5,\n            \"label\": \"Roll-out product\"\n        }],\n        tasks: [{\n            \"id\": 1,\n            \"resourceId\": 1,\n            \"label\": \"Preparation\",\n            \"from\": time(\"7:00\"),\n            \"to\": time(\"9:00\"),\n            \"classes\": \"orange\"\n        }, {\n            \"id\": 2,\n            \"resourceId\": 1,\n            \"label\": \"Planning\",\n            \"from\": time(\"9:30\"),\n            \"to\": time(\"11:00\"),\n            \"classes\": \"orange\"\n        }, {\n            \"id\": 3,\n            \"resourceId\": 2,\n            \"label\": \"Development\",\n            \"from\": time(\"12:00\"),\n            \"to\": time(\"13:30\"),\n            \"classes\": \"orange\"\n        }, {\n            \"id\": 4,\n            \"resourceId\": 3,\n            \"label\": \"Implementation\",\n            \"from\": time(\"13:45\"),\n            \"to\": time(\"15:45\"),\n            \"classes\": \"orange\"\n        }, {\n            \"id\": 5,\n            \"resourceId\": 5,\n            \"label\": \"Finish\",\n            \"from\": time(\"17:00\"),\n            \"to\": time(\"17:45\"),\n            \"classes\": \"green\"\n        }, {\n            \"id\": 6,\n            \"resourceId\": 4,\n            \"label\": \"Training\",\n            \"from\": time(\"7:00\"),\n            \"to\": time(\"10:00\"),\n            \"classes\": \"blue\"\n        }],\n        dependencies: [{\n            id: 1,\n            fromId: 1,\n            toId: 2\n        }, {\n            id: 2,\n            fromId: 2,\n            toId: 3\n        }, {\n            id: 3,\n            fromId: 3,\n            toId: 4\n        }, {\n            id: 4,\n            fromId: 4,\n            toId: 5\n        }, {\n            id: 5,\n            fromId: 6,\n            toId: 5\n        }]\n    };\n\n    let options = {\n        dateAdapter: new MomentSvelteGanttDateAdapter(moment),\n        rows: data.rows,\n        tasks: data.tasks,\n        dependencies: data.dependencies,\n        timeRanges,\n        columnOffset: 15,\n        magnetOffset: 15,\n        rowHeight: 52,\n        rowPadding: 6,\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\n        fitWidth: true,\n        minWidth: 800,\n        from: currentStart,\n        to: currentEnd,\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\n        tableWidth: 240,\n        ganttTableModules: [SvelteGanttTable],\n        ganttBodyModules: [SvelteGanttDependencies]\n    }\n\n    let gantt;\n    onMount(() => {\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt'), props: options });\n    });\n\n    function onChangeOptions(event) {\n        const opts = event.detail;\n        Object.assign(options, opts);\n        gantt.$set(options);\n    }\n</script>\n\n<style>\n    #example-gantt {\n        flex-grow: 1;\n        overflow: auto;\n    }\n\n    .container {\n        display: flex;\n        overflow: auto;\n        flex: 1;\n    }\n</style>\n\n<div class=\"container\">\n    <div id=\"example-gantt\"></div>\n    <GanttOptions options={options} on:change={onChangeOptions}/>\n</div>",
    "<script>\n    import { SvelteGantt, SvelteGanttDependencies, SvelteGanttExternal, SvelteGanttTable, MomentSvelteGanttDateAdapter } from 'svelte-gantt';\n    import { onMount, getContext } from 'svelte';\n    import { time } from '../utils';\n    import moment from 'moment';\n    import GanttOptions from '../components/GanttOptions.svelte';\n\n    const currentStart = time('06:00');\n    const currentEnd = time('18:00');\n\n    export const data = {\n        rows: [{\n            id: 1,\n            label: \"Accounting\",\n        }, {\n            id: 2,\n            label: \"Business Development\",\n        }, {\n            id: 3,\n            label: \"Ida Flewan\"\n        }, {\n            id: 4,\n            label: \"Lauréna Shrigley\"\n        }, {\n            id: 5,\n            label: \"Ange Kembry\"\n        }],\n        tasks: [{\n            id: 3,\n            resourceId: 1,\n            label: \"PET-CT\",\n            from: time(\"13:30\"),\n            to: time(\"15:00\"),\n            classes: \"orange\"\n        }, {\n            id: 4,\n            resourceId: 1,\n            label: \"Auditing\",\n            from: time(\"9:30\"),\n            to: time(\"11:30\"),\n            classes: \"orange\"\n        }, {\n            id: 5,\n            resourceId: 2,\n            label: \"Security Clearance\",\n            from: time(\"15:15\"),\n            to: time(\"16:00\"),\n            classes: \"green\"\n        }, {\n            id: 6,\n            resourceId: 2,\n            label: \"Policy Analysis\",\n            from: time(\"14:00\"),\n            to: time(\"17:00\"),\n            classes: \"blue\"\n        }, {\n            id: 7,\n            resourceId: 2,\n            label: \"Xbox 360\",\n            from: time(\"13:00\"),\n            to: time(\"14:00\"),\n            classes: \"blue\"\n        }, {\n            id: 8,\n            resourceId: 3,\n            label: \"GNU/Linux\",\n            from: time(\"14:00\"),\n            to: time(\"15:30\"),\n            classes: \"blue\"\n        }, {\n            id: 9,\n            resourceId: 4,\n            label: \"Electronic Trading\",\n            from: time(\"15:00\"),\n            to: time(\"17:00\"),\n            classes: \"green\"\n        }, {\n            id: 10,\n            resourceId: 5,\n            label: \"Alternative Medicine\",\n            from: time(\"14:30\"),\n            to: time(\"15:30\"),\n            classes: \"orange\"\n        }],\n        dependencies: []\n    }\n\n    let options = {\n        dateAdapter: new MomentSvelteGanttDateAdapter(moment),\n        rows: data.rows,\n        tasks: data.tasks,\n        dependencies: data.dependencies,\n        timeRanges: [],\n        columnOffset: 15,\n        magnetOffset: 15,\n        rowHeight: 52,\n        rowPadding: 6,\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\n        fitWidth: true,\n        minWidth: 800,\n        from: currentStart,\n        to: currentEnd,\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\n        tableWidth: 240,\n        ganttTableModules: [SvelteGanttTable],\n        ganttBodyModules: [SvelteGanttDependencies],\n        taskElementHook: (node, task) => {\n            let popup;\n            function onHover() {\n                console.log('[task] hover', task);\n                popup = createPopup(task, node);\n            }\n\n            function onLeave() {\n                console.log('[task] hover', task);\n                if(popup) {\n                    popup.remove();\n                }\n            }\n\n            node.addEventListener('mouseenter', onHover);\n            node.addEventListener('mouseleave', onLeave);\n\n            return {\n                destroy() {\n                    console.log('[task] destroy');\n                    node.removeEventListener('mouseenter', onHover);\n                    node.removeEventListener('mouseleave', onLeave);\n                }\n            }\n        },\n        // taskContent: (task) => `${task.label} ${task.from.format('HH:mm')}`\n    }\n\n    let gantt;\n    onMount(() => {\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt-events'), props: options });\n\n        gantt.api.tasks.on.move((task) => console.log('Listener: task move', task));\n        //gantt.api.tasks.on.switchRow((task, row, previousRow) => console.log('Listener: task switched row', task));\n        gantt.api.tasks.on.select((task) => console.log('Listener: task selected', task));\n        //gantt.api.tasks.on.moveEnd((task) => console.log('Listener: task move end', task));\n        gantt.api.tasks.on.change(([data]) => console.log('Listener: task change', data));\n        gantt.api.tasks.on.changed((task) => console.log('Listener: task changed', task));\n        gantt.api.tasks.on.dblclicked((task) => console.log('Listener: task double clicked', task));\n    });\n\n    function createPopup(task, node) {\n        const rect = node.getBoundingClientRect();\n        const div = document.createElement('div');\n        div.className = 'sg-popup';\n        div.innerHTML = `\n            <div class=\"sg-popup-title\">${task.label}</div>\n            <div class=\"sg-popup-item\">\n                <div class=\"sg-popup-item-label\">From:</div>\n                <div class=\"sg-popup-item-value\">${new Date(task.from).toLocaleTimeString()}</div>\n            </div>\n            <div class=\"sg-popup-item\">\n                <div class=\"sg-popup-item-label\">To:</div>\n                <div class=\"sg-popup-item-value\">${new Date(task.to).toLocaleTimeString()}</div>\n            </div>\n        `;\n        div.style.position = 'absolute';\n        div.style.top = `${rect.bottom}px`;\n        div.style.left = `${rect.left + rect.width / 2}px`;\n        document.body.appendChild(div);\n        return div;\n    }\n\n    function onChangeOptions(event) {\n        const opts = event.detail;\n        Object.assign(options, opts);\n        gantt.$set(options);\n    }\n</script>\n\n<style>\n    #example-gantt-events {\n        flex-grow: 1;\n        overflow: auto;\n    }\n\n    .container {\n        display: flex;\n        overflow: auto;\n        flex: 1;\n    }\n\n    #example-gantt-events :global(.sg-hover) {\n        background-color: #00000008;\n    }\n\n    #example-gantt-events :global(.sg-hover .sg-table-body-cell) {\n        background-color: #00000008;\n    }\n</style>\n\n<div class=\"container\">\n    <div id=\"example-gantt-events\"></div>\n    <GanttOptions options={options} on:change={onChangeOptions}/>\n</div>",
    "<script>\n    import { SvelteGantt, SvelteGanttDependencies, SvelteGanttExternal, SvelteGanttTable, MomentSvelteGanttDateAdapter } from 'svelte-gantt';\n    import { onMount, getContext } from 'svelte';\n    import { time } from '../utils';\n    import moment from 'moment';\n    import GanttOptions from '../components/GanttOptions.svelte';\n\n    const currentStart = time('06:00');\n    const currentEnd = time('18:00');\n\n    const colors = ['blue', 'green', 'orange']\n    \n    let options2 = getContext('options');\n\n    export const data = {\n        rows: [{\n            id: 1,\n            label: \"Accounting\",\n        }, {\n            id: 2,\n            label: \"Business Development\",\n        }, {\n            id: 3,\n            label: \"Ida Flewan\"\n        }, {\n            id: 4,\n            label: \"Lauréna Shrigley\"\n        }, {\n            id: 5,\n            label: \"Ange Kembry\"\n        }],\n        tasks: [{\n            id: 3,\n            resourceId: 1,\n            label: \"PET-CT\",\n            from: time(\"13:30\"),\n            to: time(\"15:00\"),\n            classes: \"orange\"\n        }, {\n            id: 4,\n            resourceId: 1,\n            label: \"Auditing\",\n            from: time(\"9:30\"),\n            to: time(\"11:30\"),\n            classes: \"orange\"\n        }, {\n            id: 5,\n            resourceId: 2,\n            label: \"Security Clearance\",\n            from: time(\"15:15\"),\n            to: time(\"16:00\"),\n            classes: \"green\"\n        }, {\n            id: 6,\n            resourceId: 2,\n            label: \"Policy Analysis\",\n            from: time(\"14:00\"),\n            to: time(\"17:00\"),\n            classes: \"blue\"\n        }, {\n            id: 7,\n            resourceId: 2,\n            label: \"Xbox 360\",\n            from: time(\"13:00\"),\n            to: time(\"14:00\"),\n            classes: \"blue\"\n        }, {\n            id: 8,\n            resourceId: 3,\n            label: \"GNU/Linux\",\n            from: time(\"14:00\"),\n            to: time(\"15:30\"),\n            classes: \"blue\"\n        }, {\n            id: 9,\n            resourceId: 4,\n            label: \"Electronic Trading\",\n            from: time(\"15:00\"),\n            to: time(\"17:00\"),\n            classes: \"green\"\n        }, {\n            id: 10,\n            resourceId: 5,\n            label: \"Alternative Medicine\",\n            from: time(\"14:30\"),\n            to: time(\"15:30\"),\n            classes: \"orange\"\n        }],\n        dependencies: []\n    }\n\n    let options = {\n        dateAdapter: new MomentSvelteGanttDateAdapter(moment),\n        rows: data.rows,\n        tasks: data.tasks,\n        dependencies: data.dependencies,\n        timeRanges: [],\n        columnOffset: 15,\n        magnetOffset: 15,\n        rowHeight: 52,\n        rowPadding: 6,\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\n        fitWidth: true,\n        minWidth: 800,\n        from: currentStart,\n        to: currentEnd,\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\n        tableWidth: 240,\n        ganttTableModules: [SvelteGanttTable],\n        ganttBodyModules: [SvelteGanttDependencies]\n    }\n\n    let gantt;\n    onMount(() => {\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt'), props: options });\n        const external = new SvelteGanttExternal(document.getElementById('new-task'), {\n            gantt,\n            onsuccess: (row, date, gantt) => {\n                console.log(row.model.id, new Date(date).toISOString())\n                const id = 5000 + Math.floor(Math.random() * 1000);\n                gantt.updateTask({\n                    id,\n                    label: `Task #${id}`,\n                    from: date,\n                    to: date + 3 * 60 * 60 * 1000,\n                    classes: colors[(Math.random() * colors.length) | 0],\n                    resourceId: row.model.id\n                });\n            },\n            elementContent: () => {\n                const element = document.createElement('div');\n                element.innerHTML = 'New Task';\n                element.className = 'sg-external-indicator';\n                return element;\n            }\n        });\n    });\n\n    function onChangeOptions(event) {\n        const opts = event.detail;\n        Object.assign(options, opts);\n        gantt.$set(options);\n    }\n</script>\n\n<style>\n    #example-gantt {\n        flex-grow: 1;\n        overflow: auto;\n    }\n\n    .container {\n        display: flex;\n        overflow: auto;\n        flex: 1;\n    }\n\n    #new-task {\n        position: absolute;\n        bottom: 0;\n        right: 0;\n        z-index: 1;\n        background-color: #ee6e73;\n        color: white;\n        padding: 1rem;\n        margin: 0.5rem;\n        cursor: grab;\n    }\n</style>\n\n<div class=\"container\">\n    <div id=\"example-gantt\"></div>\n    <div id=\"new-task\">Drag to gantt</div>\n    <GanttOptions options={options} on:change={onChangeOptions}/>\n</div>",
    "<script>\n    import { SvelteGantt, SvelteGanttTable, MomentSvelteGanttDateAdapter } from 'svelte-gantt';\n    import { onMount } from 'svelte';\n    import { time } from '../utils';\n    import moment from 'moment';\n    import GanttOptions from '../components/GanttOptions.svelte';\n    \n    const currentStart = time('06:00');\n    const currentEnd = time('18:00');\n    let generation = 0;\n    let rowCount = 100;\n    const colors = ['blue', 'green', 'orange']\n\n    const timeRanges = [\n        {\n            id: 0,\n            from: time('10:00'),\n            to: time('12:00'),\n            classes: null,\n            label: 'Lunch'\n        },\n        {\n            id: 1,\n            from: time('15:00'),\n            to: time('17:00'),\n            classes: null,\n            label: 'Dinner'\n        }\n    ];\n\n    const data = generate();\n\n    let options = {\n        dateAdapter: new MomentSvelteGanttDateAdapter(moment),\n        rows: data.rows,\n        tasks: data.tasks,\n        timeRanges,\n        columnOffset: 15,\n        magnetOffset: 15,\n        rowHeight: 52,\n        rowPadding: 6,\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\n        fitWidth: true,\n        minWidth: 800,\n        from: currentStart,\n        to: currentEnd,\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\n        tableWidth: 240,\n        ganttTableModules: [SvelteGanttTable]\n    }\n\n    let gantt;\n    onMount(() => {\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt'), props: options });\n    });\n\n\n    function shuffle(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n\n    function generate() {\n        const rows = [];\n        const tasks = [];\n\n        const ids = [...Array(rowCount).keys()];\n        shuffle(ids);\n\n        for (let i = 0; i < rowCount; i++) {\n            let rand_bool = Math.random() < 0.2;\n\n            rows.push({\n                id: i,\n                label: 'Row #' + i,\n                age: (Math.random() * 80) | 0,\n                enableDragging: true,\n                imageSrc: 'Content/joe.jpg',\n                classes: rand_bool ? ['row-disabled'] : undefined,\n                enableDragging: !rand_bool,\n                generation\n            });\n\n            rand_bool = Math.random() > 0.5;\n\n            const rand_h = (Math.random() * 10) | 0\n            const rand_d = (Math.random() * 5) | 0 + 1\n\n            tasks.push({\n                type: 'task',\n                id: ids[i],\n                resourceId: i,\n                label: 'Task #' + ids[i],\n                from: time(`${7 + rand_h}:00`),\n                to: time(`${7 + rand_h + rand_d}:00`),\n                classes: colors[(Math.random() * colors.length) | 0],\n                generation\n            });\n        }\n\n        generation += 1;\n\n        return { rows, tasks };\n    }\n\n    function onChangeOptions(event) {\n        const opts = event.detail;\n        Object.assign(options, opts);\n        gantt.$set(options);\n    }\n</script>\n\n<style>\n    #example-gantt {\n        flex-grow: 1;\n        overflow: auto;\n    }\n\n    .container {\n        display: flex;\n        overflow: auto;\n        flex: 1;\n    }\n</style>\n\n<div class=\"container\">\n    <div id=\"example-gantt\"></div>\n    <GanttOptions options={options} on:change={onChangeOptions}/>\n</div>",
    "<script>\n    import { SvelteGantt, SvelteGanttDependencies, SvelteGanttExternal, SvelteGanttTable, MomentSvelteGanttDateAdapter } from 'svelte-gantt';\n    import { onMount, getContext } from 'svelte';\n    import { time } from '../utils';\n    import moment from 'moment';\n    import GanttOptions from '../components/GanttOptions.svelte';\n\n    const currentStart = time('06:00');\n    const currentEnd = time('18:00');\n\n    const colors = ['blue', 'green', 'orange']\n\n    const timeRanges = [\n        {\n            id: 0,\n            from: time('10:00'),\n            to: time('12:00'),\n            classes: null,\n            label: 'Lunch'\n        },\n        {\n            id: 1,\n            from: time('15:00'),\n            to: time('17:00'),\n            classes: null,\n            label: 'Dinner'\n        }\n    ];\n\n    \n    let options2 = getContext('options');\n\n    export const data = {\n        rows: [{\n            id: 10,\n            label: \"Accounting\",\n            class: 'row-group',\n            iconClass: 'fas fa-calculator',\n            children: [{\n                id: 11,\n                label: \"Petunia Mulliner\"\n            }, {\n                id: 12,\n                label: \"Mélina Giacovetti\"\n            }, {\n                id: 13,\n                label: \"Marlène Lasslett\"\n            }, {\n                id: 14,\n                label: \"Adda Youell\"\n            }]\n        }, {\n            id: 20,\n            label: \"Business Development\",\n            class: 'row-group',\n            iconClass: 'fas fa-user-tie',\n            children: [{\n                id: 21,\n                label: \"Pietra Fallow\"\n            }, {\n                id: 22,\n                label: \"Mariellen Torbard\"\n            }, {\n                id: 23,\n                label: \"Renate Humbee\"\n            }]\n        }, {\n            id: 3,\n            label: \"Ida Flewan\"\n        }, {\n            id: 4,\n            label: \"Lauréna Shrigley\"\n        }, {\n            id: 5,\n            label: \"Ange Kembry\"\n        }],\n        tasks: [{\n            \"id\": 1,\n            \"resourceId\": 11,\n            \"label\": \"LPCVD\",\n            \"from\": time(\"9:00\"),\n            \"to\": time(\"11:00\"),\n            \"classes\": \"orange\"\n        }, {\n            \"id\": 2,\n            \"resourceId\": 12,\n            \"label\": \"Entrepreneurship\",\n            \"from\": time(\"10:00\"),\n            \"to\": time(\"12:30\"),\n            \"classes\": \"orange\"\n        }, {\n            \"id\": 3,\n            \"resourceId\": 13,\n            \"label\": \"PET-CT\",\n            \"from\": time(\"13:30\"),\n            \"to\": time(\"15:00\"),\n            \"classes\": \"orange\"\n        }, {\n            \"id\": 4,\n            \"resourceId\": 14,\n            \"label\": \"Auditing\",\n            \"from\": time(\"9:30\"),\n            \"to\": time(\"11:30\"),\n            \"classes\": \"orange\"\n        }, {\n            \"id\": 5,\n            \"resourceId\": 21,\n            \"label\": \"Security Clearance\",\n            \"from\": time(\"15:15\"),\n            \"to\": time(\"16:00\"),\n            \"classes\": \"green\"\n        }, {\n            \"id\": 6,\n            \"resourceId\": 22,\n            \"label\": \"Policy Analysis\",\n            \"from\": time(\"14:00\"),\n            \"to\": time(\"17:00\"),\n            \"classes\": \"blue\"\n        }, {\n            \"id\": 7,\n            \"resourceId\": 23,\n            \"label\": \"Xbox 360\",\n            \"from\": time(\"13:30\"),\n            \"to\": time(\"14:30\"),\n            \"classes\": \"blue\"\n        }, {\n            \"id\": 8,\n            \"resourceId\": 3,\n            \"label\": \"GNU/Linux\",\n            \"from\": time(\"14:00\"),\n            \"to\": time(\"15:30\"),\n            \"classes\": \"blue\"\n        }, {\n            \"id\": 9,\n            \"resourceId\": 4,\n            \"label\": \"Electronic Trading\",\n            \"from\": time(\"15:00\"),\n            \"to\": time(\"17:00\"),\n            \"classes\": \"green\"\n        }, {\n            \"id\": 10,\n            \"resourceId\": 5,\n            \"label\": \"Alternative Medicine\",\n            \"from\": time(\"14:30\"),\n            \"to\": time(\"15:30\"),\n            \"classes\": \"orange\"\n        }],\n        dependencies: []\n    }\n\n    let options = {\n        dateAdapter: new MomentSvelteGanttDateAdapter(moment),\n        rows: data.rows,\n        tasks: data.tasks,\n        dependencies: data.dependencies,\n        timeRanges,\n        columnOffset: 15,\n        magnetOffset: 15,\n        rowHeight: 52,\n        rowPadding: 6,\n        headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\n        fitWidth: true,\n        minWidth: 800,\n        from: currentStart,\n        to: currentEnd,\n        tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\n        tableWidth: 240,\n        ganttTableModules: [SvelteGanttTable],\n        ganttBodyModules: [SvelteGanttDependencies]\n    }\n\n    let gantt;\n    onMount(() => {\n        window.gantt = gantt = new SvelteGantt({ target: document.getElementById('example-gantt'), props: options });\n    });\n\n    function onChangeOptions(event) {\n        const opts = event.detail;\n        Object.assign(options, opts);\n        gantt.$set(options);\n    }\n</script>\n\n<style>\n    #example-gantt {\n        flex-grow: 1;\n        overflow: auto;\n    }\n\n    .container {\n        display: flex;\n        overflow: auto;\n        flex: 1;\n    }\n</style>\n\n<div class=\"container\">\n    <div id=\"example-gantt\"></div>\n    <GanttOptions options={options} on:change={onChangeOptions}/>\n</div>"
  ],
  "names": [],
  "mappings": "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"
}